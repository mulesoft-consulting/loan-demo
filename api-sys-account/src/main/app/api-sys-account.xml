<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd">
    <apikit:config name="api-sys-account-config" raml="api-sys-account.raml" consoleEnabled="true" consolePath="console" doc:name="Router"/>
    <db:mysql-config name="MySQL_Configuration" host="${db.hostname}" port="${db.port}" user="${db.user}" password="${db.password}" database="${db.database}" doc:name="MySQL Configuration"/>
    <api-platform-gw:api apiName="sfs-api-sys-account" id="sfs-api-sys-account" version="1.0" flowRef="api-sys-account-main" create="true" apikitRef="api-sys-account-config" doc:name="API Autodiscovery"/>
    <flow name="api-sys-account-main">
        <http:listener config-ref="http-lc-0.0.0.0-8081" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="api-sys-account-config" doc:name="APIkit Router"/>
        <exception-strategy ref="api-sys-account-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="post:/account:application/json:api-sys-account-config">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java

---
{
	prePaidFinanceCharges: payload.prePaidFinanceCharges,
	combinedCreditScore: payload.combinedCreditScore,
	debtIncomeRatio: payload.debtIncomeRatio,
	minimumAdvanceAmount: payload.minimumAdvanceAmount,
	prePaymentPenaltyBasisAmount: payload.prepaymentPenaltyBasisAmount,
	loanAccountStatus: payload.loanAccountStatus,
	statementCode: payload.statementCode,
	statementDate: (payload.statementDate) when payload.satementDate != null and payload.statementDate != "" 
		otherwise "1900-01-01",
	noteNumber: payload.noteNumber,
	maximumAdvanceAmount: payload.maximumAdvanceAmount,
	isRevolvingLineOfCredit: payload.isRevolvingLineOfCredit,
	paymentOption: payload.paymentOption,
	creditLimit: payload.creditLimit,
	term: payload.term,
	creditLimitGroupCode: payload.creditLimitGroupCode,
	noteAmount: payload.noteAmount,
	balloonDueDateTermValue: payload.balloonDueDateTermValue,
	prePaymentPenaltyExpirationDate: (payload.prepaymentPenaltyExpirationDate) when payload.prepaymentPenaltyExpirationDate != null and payload.prepaymentPenaltyExpirationDate != ""
		otherwise "1900-01-01",
	loanInterestRateDetail: payload.loanInterestRateDetail,
	totalNumberOfPayments: payload.totalNumberOfPayments,
	prePaymentPenaltyPercentage: payload.prepaymentPenaltyPercentage,
	loanDecisionDate: (payload.loanDecisionDate) when payload.loanDecisionDate != null and payload.loanDecisionDate != "" 
		otherwise ("1900-01-01"),
	creditLimitExpiration: (payload.creditLimitExpiration) when payload.creditLimitExpiration != null and payload.creditLimitExpiration != "" 
		otherwise "1900-01-01",
	originationDate: (payload.originationDate) when payload.originationDate !=null and payload.originationDate !="" 
		otherwise "1900-01-01",
	applicationDecisionStatus: payload.applicationDecisionStatus,
	creationDate: (payload.creationDate) when payload.creationDate !=null and payload.creationDate != "" 
		otherwise "1900-01-01",
	disbursalDate: (payload.disbursalDate) when payload.disbursalDate != null and payload.disbursalDate != "" 
		otherwise "1900-01-01",
	dailyPeriodicRate: payload.dailyPeriodicRate,
	balloonAmount: payload.balloonAmount,
	balloonDueDate: (payload.balloonDueDate) when payload.balloonDueDate != null and payload.balloonDueDate !="" 
		otherwise "1900-01-01",
	prepaidInterest: payload.prepaidInterest,
	statementGroup: payload.statementGroup,
	numberOfGraceDays: payload.numberOfGraceDays,
	purposeCode: payload.purposeCode,
	requestedAmount: payload.requestedAmount,
	loanAccountSubstatus: payload.loanAccountSubStatus,
	category: payload.category,
	applicationOriginationDate: (payload.applicationOriginationDate) when payload.applicationOriginationDate != null and payload.applicationOriginationDate != "" 
		otherwise "1900-01-01",
	interestPaidThruDate: (payload.interestPaidThruDate) when payload.interestPaidThruDate != null and payload.interestPaidThruDate != "" 
		otherwise "1900-01-01",
	creditReportingCode: payload.creditReportingCode
}]]></dw:set-payload>
            <dw:set-variable variableName="originalRequest"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
            <db:insert config-ref="MySQL_Configuration" autoGeneratedKeys="true" doc:name="Database">
                <db:parameterized-query><![CDATA[insert into spring_leaf.account(loan_decision_date, application_origination_date, application_decision_status, loan_account_status, loan_account_substatus, note_number, category, purpose_code, requested_amount, note_amount, credit_limit, credit_limit_expiration, credit_limit_group_code, credit_reporting_code, is_revolving_line_of_credit, minimum_advance_amount, maximum_advance_amount, origination_date, disbursal_date, creation_date, term, combined_credit_score, loan_interest_rate_detail, payment_option, daily_periodic_rate, total_number_of_payments, pre_paid_finance_charges, prepaid_interest, interest_paid_thru_date, number_of_grace_days, balloon_amount, balloon_due_date, balloon_due_date_term_value, pre_payment_penalty_basis_amount, pre_payment_penalty_percentage, pre_payment_penalty_expiration_date, statement_code, statement_group, statement_date, debt_income_ratio)
values(STR_TO_DATE(#[payload.loanDecisionDate],'%Y-%m-%d'),STR_TO_DATE(#[payload.applicationOriginationDate],'%Y-%m-%d'),#[payload.applicationDecisionStatus],#[payload.loanAccountStatus],#[payload.loanAccountSubstatus],#[payload.noteNumber],#[payload.category],#[payload.purposeCode],#[payload.requestedAmount],#[payload.noteAmount],#[payload.creditLimit],STR_TO_DATE(#[payload.creditLimitExpiration],'%Y-%m-%d'),#[payload.creditLimitGroupCode],#[payload.creditReportingCode],#[payload.isRevolvingLineOfCredit],#[payload.minimumAdvanceAmount],#[payload.maximumAdvanceAmount],STR_TO_DATE(#[payload.originationDate],'%Y-%m-%d'),STR_TO_DATE(#[payload.disbursalDate],'%Y-%m-%d'),STR_TO_DATE(#[payload.creationDate],'%Y-%m-%d'),#[payload.term],#[payload.combinedCreditScore],#[payload.loanInterestRateDetail],#[payload.paymentOption],#[payload.dailyPeriodicRate],#[payload.totalNumberOfPayments],#[payload.prePaidFinanceCharges],#[payload.prepaidInterest],STR_TO_DATE(#[payload.interestPaidThruDate],'%Y-%m-%d'),#[payload.numberOfGraceDays],#[payload.balloonAmount],STR_TO_DATE(#[payload.balloonDueDate],'%Y-%m-%d'),#[payload.balloonDueDateTermValue],#[payload.prePaymentPenaltyBasisAmount],#[payload.prePaymentPenaltyPercentage],STR_TO_DATE(#[payload.prePaymentPenaltyExpirationDate],'%Y-%m-%d'),#[payload.statementCode],#[payload.statementGroup],#[payload.statementDate],#[payload.debtIncomeRatio])]]></db:parameterized-query>
            </db:insert>
        </transactional>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	account_id: payload[0].generated_key,
	applicationDecisionStatus: flowVars.originalRequest.applicationDecisionStatus,
	applicationOriginationDate: flowVars.originalRequest.applicationOriginationDate,
	balloonAmount: flowVars.originalRequest.balloonAmount,
	balloonDueDate: flowVars.originalRequest.balloonDueDate,
	balloonDueDateTermValue: flowVars.originalRequest.balloonDueDateTermValue,
	category: flowVars.originalRequest.category,
	combinedCreditScore: flowVars.originalRequest.combinedCreditScore,
	creationDate: flowVars.originalRequest.creationDate,
	creditLimit: flowVars.originalRequest.creditLimit,
	creditLimitExpiration: flowVars.originalRequest.creditLimitExpiration,
	creditLimitGroupCode: flowVars.originalRequest.creditLimitGroupCode,
	creditReportingCode: flowVars.originalRequest.creditReportingCode,
	dailyPeriodicRate: flowVars.originalRequest.dailyPeriodicRate,
	debtIncomeRatio: flowVars.originalRequest.debtIncomeRatio,
	disbursalDate: flowVars.originalRequest.disbursalDate,
	interestPaidThruDate: flowVars.originalRequest.interestPaidThruDate,
	isRevolvingLineOfCredit: flowVars.originalRequest.isRevolvingLineOfCredit,
	loanAccountStatus: flowVars.originalRequest.loanAccountStatus,
	loanAccountSubStatus: flowVars.originalRequest.loanAccountSubStatus,
	loanDecisionDate: flowVars.originalRequest.loanDecisionDate,
	loanInterestRateDetail: flowVars.originalRequest.loanInterestRateDetail,
	maximumAdvanceAmount: flowVars.originalRequest.maximumAdvanceAmount,
	minimumAdvanceAmount: flowVars.originalRequest.minimumAdvanceAmount,
	noteAmount: flowVars.originalRequest.noteAmount,
	noteNumber: flowVars.originalRequest.noteNumber,
	numberOfGraceDays: flowVars.originalRequest.numberOfGraceDays,
	originationDate: flowVars.originalRequest.originationDate,
	paymentOption: flowVars.originalRequest.paymentOption,
	prePaidFinanceCharges: flowVars.originalRequest.prePaidFinanceCharges,
	prepaidInterest: flowVars.originalRequest.prepaidInterest,
	prepaymentPenaltyBasisAmount: flowVars.originalRequest.prepaymentPenaltyBasisAmount,
	prepaymentPenaltyExpirationDate: flowVars.originalRequest.prepaymentPenaltyExpirationDate,
	prepaymentPenaltyPercentage: flowVars.originalRequest.prepaymentPenaltyPercentage,
	purposeCode: flowVars.originalRequest.purposeCode,
	requestedAmount: flowVars.originalRequest.requestedAmount,
	statementCode: flowVars.originalRequest.statementCode,
	statementDate: flowVars.originalRequest.statementDate,
	statementGroup: flowVars.originalRequest.statementGroup,
	term: flowVars.originalRequest.term,
	totalNumberOfPayments: flowVars.originalRequest.totalNumberOfPayments
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <apikit:mapping-exception-strategy name="api-sys-account-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>

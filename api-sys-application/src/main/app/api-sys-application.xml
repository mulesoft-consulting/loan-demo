<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:context="http://www.springframework.org/schema/context" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <context:property-placeholder location="api.properties" />
    <apikit:config name="api-sys-application-config" raml="api-sys-application.raml" consoleEnabled="true" consolePath="console" doc:name="Router" />
    <db:mysql-config name="MySQL_Configuration" host="${db.hostname}" port="${db.port}" user="${db.user}" password="${db.password}" database="${db.database}" doc:name="MySQL Configuration" />
    <flow name="api-sys-application-main">
        <http:listener config-ref="http-lc-0.0.0.0-8081" path="/api/*" doc:name="HTTP" />
        <apikit:router config-ref="api-sys-application-config" doc:name="APIkit Router" />
        <exception-strategy ref="api-sys-application-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="get:/application:api-sys-application-config">
        <db:select config-ref="MySQL_Configuration" doc:name="Get Applications">
            <db:parameterized-query><![CDATA[select l.id loan_id, l.loan_amount, l.loan_purpose, l.offer_number, l.first_name, l.middle_initial, l.last_name, l.birth_date
, l.email, l.ssn, l.loan_status, f.id financial_id, f.retired, f.self_employed, f.monthly_net_income, f.savings_checkings, e.name, e.hire_date from spring_leaf
.loans l left join spring_leaf.financial_information f on f.loan_id = l.id left join spring_leaf.employer e on e.financial_information_id = f.id]]></db:parameterized-query>
        </db:select>
        <dw:transform-message doc:name="Get Ids">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
            <dw:set-variable variableName="ids"><![CDATA[%dw 1.0
%output application/java
---
payload.loan_id joinBy ',']]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="loadApplicationChildren" doc:name="loadApplicationChildren" />
    </flow>
    <sub-flow name="loadApplicationChildren">
        <scatter-gather doc:name="Scatter-Gather">
            <set-payload value="#[payload]" doc:name="Set Loans" />
            <db:select config-ref="MySQL_Configuration" doc:name="Get Addresses">
                <db:dynamic-query><![CDATA[select * from spring_leaf.addresses where loan_id in (#[flowVars.ids])]]></db:dynamic-query>
            </db:select>
            <db:select config-ref="MySQL_Configuration" doc:name="Get Contacts">
                <db:dynamic-query><![CDATA[select * from spring_leaf.contacts where loan_id in (#[flowVars['ids']])]]></db:dynamic-query>
            </db:select>
        </scatter-gather>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var addresses = payload[1]
%var contacts = payload[2]
%output application/dw
---
payload[0] map using (loan = $)
{
	"loan_app": {
		loan_amount: loan.loan_amount,
		loan_purpose: loan.loan_purpose,
		offerNumber: loan.offerNumber,
		first_name: loan.first_name,
		middle_initial: loan.middle_initial,
		last_name: loan.last_name,
		(birth_date: loan.birth_date as :string {format: "MM/dd/yyyy"}) when loan.birth_date?,
		ssn: loan.ssn,
		addresses: payload[1] filter ($.loan_id == loan.loan_id) map using (address = $) {
			isMailingOnly: address.mailing_only,
			address1: address.address1,
			address2: address.address2,
			city: address.city,
			state: address.state,
			zip: address.zip,
			(moveIn_date: address.move_date as :string {format: 'MM/dd/yyyy'}) when address.move_date?
		},
		email_address: loan.email,
		contact_numbers: contacts filter $.loan_id == loan.loan_id map using (contact = $) {
			isPrimary: contact.is_primary,
			phone_number: contact.phone_number,
			type: contact.type
		},
		financial_information: {
			retired: loan.retired,
			self_employed: loan.self_employed,
			employer: {
				name: loan.name,
				(hired_date: loan.hired_date as :string {format: 'MM/dd/yyyy'}) when loan.hired_date?
			},
			monthly_net_income: loan.monthly_net_income,
			savings_checkings: loan.savings_checkings
		},
		loan_status: loan.loan_status,
		loan_application_id: loan.loan_id
	}
}]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
    <flow name="get:/application/{loanId}:api-sys-application-config">
        <set-variable variableName="ids" value="#[loanId]" doc:name="Variable" />
        <db:select config-ref="MySQL_Configuration" doc:name="Load Loan">
            <db:parameterized-query><![CDATA[select l.id loan_id, l.loan_amount, l.loan_purpose, l.offer_number, l.first_name, l.middle_initial, l.last_name, l.birth_date
, l.email, l.ssn, l.loan_status, f.id financial_id, f.retired, f.self_employed, f.monthly_net_income, f.savings_checkings, e.name, e.hire_date from spring_leaf
.loans l left join spring_leaf.financial_information f on f.loan_id = l.id left join spring_leaf.employer e on e.financial_information_id = f.id where l.id = #[loanId]]]></db:parameterized-query>
        </db:select>
        <flow-ref name="loadApplicationChildren" doc:name="loadApplicationChildren" />
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload[0]]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="post:/application:application/json:api-sys-application-config">
        <dw:transform-message doc:name="Set Variables">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.loan_app]]></dw:set-payload>
            <dw:set-variable variableName="originalRequest"><![CDATA[%dw 1.0
%output application/java
---
payload.loan_app]]></dw:set-variable>
            <dw:set-variable variableName="addresses"><![CDATA[%dw 1.0
%output application/java
---
payload.loan_app.addresses]]></dw:set-variable>
            <dw:set-variable variableName="contacts"><![CDATA[%dw 1.0
%output application/java
---
payload.loan_app.contact_numbers]]></dw:set-variable>
            <dw:set-variable variableName="financial_information"><![CDATA[%dw 1.0
%output application/java
---
payload.loan_app.financial_information]]></dw:set-variable>
        </dw:transform-message>
        <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
            <db:insert config-ref="MySQL_Configuration" autoGeneratedKeys="true" doc:name="Insert Loan">
                <db:parameterized-query><![CDATA[insert into spring_leaf.loans (loan_amount, loan_purpose, offer_number, first_name, middle_initial, last_name, birth_date, ssn, email, loan_status) values(#[payload.loan_amount], #[payload.loan_purpose], #[payload.offer_number], #[payload.first_name], #[payload.middle_name], #[payload.last_name],STR_TO_DATE(#[payload.birth_date],"%m/%d/%Y"), #[payload.ssn],#[payload.email_address],#[payload.loan_status])]]></db:parameterized-query>
            </db:insert>
            <dw:transform-message doc:name="Save Loan ID">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	loan_id: payload[0].generated_key
}]]></dw:set-payload>
                <dw:set-variable variableName="loan_id"><![CDATA[%dw 1.0
%output application/java
---
payload[0].generated_key]]></dw:set-variable>
            </dw:transform-message>
            <scatter-gather doc:name="Scatter-Gather">
                <flow-ref name="insertAddress_Flow" doc:name="insertAddress_Flow" />
                <flow-ref name="insertContacts_Flow" doc:name="insertContacts_Flow" />
                <flow-ref name="insertFinancialInformation_Flow" doc:name="insertFinancialInformation_Flow" />
            </scatter-gather>
        </transactional>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"loan_app": {
		loan_amount: flowVars.originalRequest.loan_amount,
		loan_purpose: flowVars.originalRequest.loan_purpose,
		offerNumber: flowVars.originalRequest.offerNumber,
		first_name: flowVars.originalRequest.first_name,
		middle_initial: flowVars.originalRequest.middle_initial,
		last_name: flowVars.originalRequest.last_name,
		(birth_date: flowVars.originalRequest.birth_date as :string {format: "MM/dd/yyyy"}) when flowVars.originalRequest.birth_date?,
		ssn: flowVars.originalRequest.ssn,
		addresses: flowVars.addresses map using (address = $) {
			isMailingOnly: address.mailing_only,
			address1: address.address1,
			address2: address.address2,
			city: address.city,
			state: address.state,
			zip: address.zip,
			(moveIn_date: address.move_date as :string {format: 'MM/dd/yyyy'}) when address.move_date?
		},
		email_address: flowVars.originalRequest.email_address,
		contact_numbers: flowVars.contacts map using (contact = $) {
			isPrimary: contact.primary,
			phone_number: contact.phone_number,
			type: contact.type
		},
		financial_information: {
			retired: flowVars.financial_information.retired,
			self_employed: flowVars.financial_information.self_employed,
			employer: {
				name: flowVars.financial_information.employer.name,
				(hired_date: flowVars.financial_information.employer.hired_date as :string {format: 'MM/dd/yyyy'}) when flowVars.financial_information.employer.hired_date?
			},
			monthly_net_income: flowVars.financial_information.monthly_net_income,
			savings_checkings: flowVars.financial_information.savings_checkings
		},
		loan_status: flowVars.originalRequest.loan_status,
		loan_application_id: flowVars.loan_id
	}
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="insertAddress_Flow" processingStrategy="synchronous">
        <foreach collection="#[flowVars.addresses]" rootMessageVariableName="address" doc:name="For Each">
            <db:insert config-ref="MySQL_Configuration" doc:name="Insert Address">
                <db:parameterized-query><![CDATA[insert into spring_leaf.addresses(mailing_only, address1, address2, city, state, zip, moved_date, loan_id) 
values(#[payload.isMailingOnly],#[payload.address1],#[payload.address2], #[payload.city], #[payload.state], #[payload.zip], STR_TO_DATE(#[payload.moveIn_date],"%m/%d/%Y"), #[flowVars.loan_id])]]></db:parameterized-query>
            </db:insert>
        </foreach>
    </flow>
    <flow name="insertContacts_Flow" processingStrategy="synchronous">
        <foreach collection="#[flowVars.contacts]" rootMessageVariableName="contact" doc:name="For Each">
            <db:insert config-ref="MySQL_Configuration" doc:name="Insert Contacts">
                <db:parameterized-query><![CDATA[insert into spring_leaf.contacts(is_primary, phone_number, type, loan_id) 
values(#[payload.isPrimary],#[payload.phone_number],#[payload.type], #[flowVars.loan_id])]]></db:parameterized-query>
            </db:insert>
        </foreach>
    </flow>
    <flow name="insertFinancialInformation_Flow" processingStrategy="synchronous">
        <db:insert config-ref="MySQL_Configuration" autoGeneratedKeys="true" doc:name="Insert financial Information">
            <db:parameterized-query><![CDATA[insert into financial_information(retired, self_employed, monthly_net_income, savings_checkings, loan_id)
values(#[flowVars.financial_information.retired], 
#[flowVars.financial_information.self_employed],
#[flowVars.financial_information.monthly_net_income],
#[flowVars.financial_information.savings_checkings],
#[payload.loan_id])]]></db:parameterized-query>
        </db:insert>
        <choice doc:name="Choice">
            <when expression="#[flowVars.financial_information.self_employed == false]">
                <db:insert config-ref="MySQL_Configuration" doc:name="Insert Employer">
                    <db:parameterized-query><![CDATA[insert into spring_leaf.employer(name, hire_date, financial_information_id)
values(#[flowVars.financial_information.employer.name],#[flowVars.financial_information.employer.hired_date],#[payload[0].generated_key])]]></db:parameterized-query>
                </db:insert>
            </when>
            <otherwise>
                <set-payload value="#[payload]" doc:name="Set Payload" />
            </otherwise>
        </choice>
    </flow>
    <flow name="patch:/application/{loanId}:application/json:api-sys-application-config">
        <set-variable variableName="path" value="#[json:path]" doc:name="Set Path"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.path == '/status']">
                <flow-ref name="update_loan_statusSub_Flow" doc:name="update_loan_statusSub_Flow"/>
            </when>
            <otherwise>
                <scripting:transformer doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotAcceptableException()]]></scripting:script>
                </scripting:transformer>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="update_loan_statusSub_Flow">
        <db:update config-ref="MySQL_Configuration" doc:name="Update Loan Status">
            <db:parameterized-query><![CDATA[update spring_leaf.loans set loan_status=#[payload.value] where id = #[flowVars.loanId]]]></db:parameterized-query>
        </db:update>
    </sub-flow>
    <apikit:mapping-exception-strategy name="api-sys-application-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
